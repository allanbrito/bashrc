alias bash_update_version="( [ -f ~/.bashversion ] || touch ~/.bashversion) && echo $(date -d '-1 min' '+%Y-%m-%dT%H:%M') > ~/.bashversion"

function bash_changelog {
	local lines="$@"
	local message=$(git -C "$path_bash_files" log -"${lines:-10}" | cat)
	[[ ${#message} != 0 ]] && echo "Últimas mudanças:" && git -C "$path_bash_files" log -"${lines:-10}" --pretty=format:"%C(white bold) %s %C(reset)%C(bold)%C(yellow ul)<%an, %ar>%C(reset)" | cat
	if [[ $lines != "" ]]; then
		bash_update_version
	fi
}

function bash_commit {
	# read -r -p "Deseja atualizar as funções? [S/n] " response
	clear
	read -r -p "Existem alterações, deseja [V]er ou [C]ommitar? [C/v/*] " response
	case $response in
		[cC])
			local path="${PWD##/}"
			read -r -p "Mensagem do commit: " msg
			msg=${msg:-bash_update}
			cd "$path_bash_files"
			cp ../.bashrc .bashrc
			# cp ~/AppData/Roaming/ConEmu.xml "$path_bash_files"/bash/
			git add .
			git commit -am "$msg"
			bash_update_version
			git pull origin master &&
			git push origin master
			cd "/$path"
		;;
		[vV])
			git diff --no-index -- "$path_bash_files"/.bashrc "$path_bash_files"/../.bashrc
			bash_commit
		;;
		"")
			bash_commit
		;;
	esac
}

function bash_config {
	/C/Program\ Files/Sublime\ Text\ 3/subl.exe ~/.bashrc
}

function bash_init {
	if [ ! -d "$path_bash_files"/.git ]; then
		git -C "$path_bash_files" init
		git -C "$path_bash_files" remote add origin https://github.com/allanbrito/my_bash.git
		git -C "$path_bash_files" fetch --all
		git -C "$path_bash_files" pull origin master
		bash_update_version
		cp "$path_bash_files"/.bashrc "$path_bash_files"/../.bashrc
		# cp "$path_bash_files"/bash/ConEmu.xml ~/AppData/Roaming/
		# if [[ $windows == true ]]; then
			cp $path_bash_files/bash/Bash.lnk ~/Desktop/
			# $path_bash_files/bash/Bash.exe
			# exit
		# fi
	fi
	if [[ ! -f ~/Desktop/Bash.lnk ]]; then
		cp $path_bash_files/bash/Bash.lnk ~/Desktop/
	fi
}

function bash_reset {
	. ~/.bashrc
	# if [[ "$windows" == true ]] ; then
		# $path_bash_files/bash/Bash.exe
		# "C:\Program Files (x86)\Git\bin\sh.exe" --login -i
	# fi
}

function bash_update {
	git -C "$path_bash_files" fetch
	if [[ $(git -C "$path_bash_files" rev-parse HEAD) != $(git -C "$path_bash_files" rev-parse origin/master) ]]; then
		# read -r -p "Deseja atualizar as funções? [S/n] " response
		# case $response in
		# 	[sS][iI][mM]|[sS])
				cd "$path_bash_files"
				git checkout -f
				git pull origin master
				cp .bashrc ../.bashrc
				bash_reset
		# 	;;
		# esac
	fi
}

if [[ "$atualiza_bashrc" == true ]] ; then
	# bash_init
	if [[ $(diff "$path_bash_files"/.bashrc "$path_bash_files"/../.bashrc) ]]; then
		echo -e "Existem novas alterações, {\e[1m\e[4;36mcommit\e[0;1m\e[0;1m}\e[0;2m para atualizar"
		# bash_commit
	else
		[[ $(git -C "$path_bash_files" rev-parse HEAD) != $(git -C "$path_bash_files" rev-parse origin/master) ]] && echo -e "Existem novas atualizações, {\e[1m\e[4;36mupdate\e[0;1m\e[0;1m}\e[0;2m para atualizar"
		# bash_update
	fi
	# clear
fi

# _bash_changelog(){
# 	local cur=${COMP_WORDS[COMP_CWORD]}

# 	if [[ "$cur" == '' ]]; then
# 		local help=$([[ -f ${path_help}bash_changelog ]] && cat ${path_help}bash_changelog | sed 's/\\e\[[0-9;]*m//g' | sed 's/{/ou /g' | sed 's/}//g')
# 		[[ $help ]] && COMPREPLY=("~" "${help}" "Aceita um número como quantidade de linhas")
# 		return 0
# 	fi
# }
alias changelog=bash_changelog
# complete -F _bash_changelog bash_changelog changelog

# _bash_commit() {
# 	local cur=${COMP_WORDS[COMP_CWORD]}

# 	if [[ "$cur" == '' ]]; then
# 		local help=$([[ -f ${path_help}bash_commit ]] && cat ${path_help}bash_commit | sed 's/\\e\[[0-9;]*m//g' | sed 's/{/ou /g' | sed 's/}//g')
# 		[[ $help ]] && COMPREPLY=("~" "${help}")
# 		return 0
# 	fi
# }
alias commit=bash_commit
# complete -F _bash_commit bash_commit commit

# _bash_config() {
# 	local cur=${COMP_WORDS[COMP_CWORD]}

# 	if [[ "$cur" == '' ]]; then
# 		local help=$([[ -f ${path_help}bash_config ]] && cat ${path_help}bash_config | sed 's/\\e\[[0-9;]*m//g' | sed 's/{/ou /g' | sed 's/}//g')
# 		[[ $help ]] && COMPREPLY=("~" "${help}")
# 		return 0
# 	fi
# }
alias bash=bash_config
# complete -F _bash_config bash_config config

# _bash_init() {
# 	local cur=${COMP_WORDS[COMP_CWORD]}

# 	if [[ "$cur" == '' ]]; then
# 		local help=$([[ -f ${path_help}bash_init ]] && cat ${path_help}bash_init | sed 's/\\e\[[0-9;]*m//g' | sed 's/{/ou /g' | sed 's/}//g')
# 		[[ $help ]] && COMPREPLY=("~" "${help}")
# 		return 0
# 	fi
# }
alias init=bash_init
# complete -F _bash_init bash_init init

# _bash_reset() {
# 	local cur=${COMP_WORDS[COMP_CWORD]}

# 	if [[ "$cur" == '' ]]; then
# 		local help=$([[ -f ${path_help}bash_reset ]] && cat ${path_help}bash_reset | sed 's/\\e\[[0-9;]*m//g' | sed 's/{/ou /g' | sed 's/}//g')
# 		[[ $help ]] && COMPREPLY=("~" "${help}")
# 		return 0
# 	fi
# }
alias reset=bash_reset
# complete -F _bash_reset bash_reset reset

# _bash_update() {
# 	local cur=${COMP_WORDS[COMP_CWORD]}

# 	if [[ "$cur" == '' ]]; then
# 		local help=$([[ -f ${path_help}bash_update ]] && cat ${path_help}bash_update | sed 's/\\e\[[0-9;]*m//g' | sed 's/{/ou /g' | sed 's/}//g')
# 		[[ $help ]] && COMPREPLY=("~" "${help}")
# 		return 0
# 	fi
# }
alias update=bash_update
# complete -F _bash_update bash_update update