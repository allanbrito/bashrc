alias bash=bash_config
alias changelog=bash_changelog
alias commit=bash_commit
alias reset=bash_reset
alias update=bash_update
alias init=bash_init
alias bash_update_version="( [ -f ~/.bashversion ] || touch ~/.bashversion) && echo $(date -d '-1 min' '+%Y-%m-%dT%H:%M') > ~/.bashversion"

function bash_changelog {
	local lines="$@"
	local message=$(git -C "$path_bash_files" log ${lines:--10} | cat)
	[[ ${#message} != 0 ]] && echo "Últimas mudanças:" && git -C "$path_bash_files" log "${lines:--10}" --pretty=format:"%C(white bold) %s %C(reset)%C(bold)%C(yellow ul)<%an, %ar>%C(reset)" | cat
	if [[ $lines != "" ]]; then
		bash_update_version
	fi
}

function bash_commit {
	# read -r -p "Deseja atualizar as funções? [S/n] " response
	clear
	read -r -p "Existem alterações, deseja [V]er ou [C]ommitar? [C/v/*] " response
	case $response in
		[cC])
			local path="${PWD##/}"
			read -r -p "Mensagem do commit: " msg
			msg=${msg:-bash_update}
			cd "$path_bash_files"
			cp ../.bashrc .bashrc
			# cp ~/AppData/Roaming/ConEmu.xml "$path_bash_files"/bash/
			git add .
			git commit -am "$msg"
			bash_update_version
			git pull origin master &&
			git push origin master
			cd "/$path"
		;;
		[vV])
			git diff --no-index -- "$path_bash_files"/.bashrc "$path_bash_files"/../.bashrc
			bash_commit
		;;
		"")
			bash_commit
		;;
	esac
}

function bash_config {
	if [[ "$windows" == true ]] ; then
		/C/Program\ Files/Sublime\ Text\ 3/subl.exe ~/.bashrc
	fi
}

function bash_init {
	if [ ! -d "$path_bash_files"/.git ]; then
		git -C "$path_bash_files" init
		git -C "$path_bash_files" remote add origin https://github.com/allanbrito/my_bash.git
		git -C "$path_bash_files" fetch --all
		git -C "$path_bash_files" pull origin master
		bash_update_version
		cp "$path_bash_files"/.bashrc "$path_bash_files"/../.bashrc
		# cp "$path_bash_files"/bash/ConEmu.xml ~/AppData/Roaming/
		if [[ $windows == true ]]; then
			cp $path_bash_files/bash/Bash.lnk ~/Desktop/
			$path_bash_files/bash/Bash.exe
			exit
		fi
	fi
	if [[ ! -f ~/Desktop/Bash.lnk ]]; then
		cp $path_bash_files/bash/Bash.lnk ~/Desktop/
	fi
}

function bash_reset {
	. ~/.bashrc
	# if [[ "$windows" == true ]] ; then
		# $path_bash_files/bash/Bash.exe
		# "C:\Program Files (x86)\Git\bin\sh.exe" --login -i
	# fi
}

function bash_update {
	git -C "$path_bash_files" fetch
	if [[ $(git -C "$path_bash_files" rev-parse HEAD) != $(git -C "$path_bash_files" rev-parse origin/master) ]]; then
		# read -r -p "Deseja atualizar as funções? [S/n] " response
		# case $response in
		# 	[sS][iI][mM]|[sS])
				cd "$path_bash_files"
				git checkout -f
				git pull origin master
				cp .bashrc ../.bashrc
				bash_reset
		# 	;;
		# esac
	fi
}

if [[ "$atualiza_bashrc" == true ]] ; then
	# bash_init
	if [[ $(diff "$path_bash_files"/.bashrc "$path_bash_files"/../.bashrc) ]]; then
		echo Existem novas alterações. "commit" para atualizar
		# bash_commit
	else
		[[ $(git -C "$path_bash_files" rev-parse HEAD) != $(git -C "$path_bash_files" rev-parse origin/master) ]] && echo Existem novas atualizações. "update" para atualizar
		# bash_update
	fi
	# clear
fi
