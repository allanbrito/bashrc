alias bkp=mysql_backup
alias bkpl=mysql_backup_local
alias bkpr=mysql_backup_remote
alias upl=mysql_upload
alias upll=mysql_upload_local
alias uplr=mysql_upload_remote
alias dump=mysql_dump
alias dumpm=mysql_dump_migracao
alias restore=mysql_restore
alias restorem=mysql_restore_migracao
alias base_migracao=init_base_migracao
alias urlsispagl=mysql_update_urlws_local
alias urlsispagr=mysql_update_urlws_remote
alias mysql=$path_root/../mysql/bin/mysql.exe
alias mysqldump=$path_root/../mysql/bin/mysqldump.exe
alias use=mysql_use

function mysql_backup {
	local host="$local_host"
	local user="$local_user"
	local pass="$local_pass"
	local ssh="200"
	local banco=
	local tabelas=
	local exit=false
	local remote=false
	local bIgnoraTabelas=true
	local aTabelasIgnoradas=(log_log uso_usuario usi_usuario_grupo_usuario pro_perfil_usuario usuario_acao sms_sms eml_email)
	local extracommands=''
	now=$(date +"%Y%m%d_%H%M")

	mkdir -p ~/backups

	while [ "$1" != "" ]; do
		case $1 in
			-h | --host )
				shift
				host=$1
				ssh=
			;;
			-u | --user )
				shift
				user=$1
				ssh=
			;;
			-p | --pass )
				shift
				pass=$1
				ssh=
			;;
			-b | --banco )
				shift
				banco=$1
			;;
			-d | --no-data )
				extracommands+=" -d"
			;;
			-t | --tabelas )
				shift
				tabelas=$1
			;;
			-f | --full)
				bIgnoraTabelas=false
				;;
			-r | --remote )
				remote=true
				ssh="sindicalizi"
				;;
			--h | -help )
				echo "    Usage: banco [tabela1 tabela2 ...] [-h host] [-u usuario] [-p senha] [-r]"
				echo "       Options:"
				echo "         -h: define o host. 	Padrão: acesso à 200"
				echo "         -u: define o usuario.	Padrão: acesso à 200"
				echo "         -p: define a senha.	Padrão: acesso à 200"
				echo "         -r: troca o padrão de acesso para a produção"
				echo "       Parameters:"
				echo "         -banco: banco que será baixado"
				echo "         -tabelas: tabelas que serão baixadas (opcional)"
				exit=true
			;;
			* )
				if [[ $banco == "" ]] ; then
					banco=$1
				else
					if [[ $tabelas == "" ]] ; then
						tabelas="$1"
					else
						tabelas="$tabelas $1"
					fi
				fi
			;;
		esac
		shift
	done

	if [[ $exit == false ]] &&  [[ $banco != "" ]]; then
		if [[ $remote == true ]] ; then
			host="$remote_host"
			user="$remote_user"
			pass="$remote_pass"
			path=remote_"$banco"_$now
		else
			path=local_"$banco"_$now
		fi
		if [[ $tabelas != "" ]] ; then
			path="$path"_"($tabelas)"
		fi
		mkdir -p ~/backups/"$banco"
		path="$path".sql
		fullpath=~/backups/"$banco"/"${path// /_}"
		if [[ $banco != *_* ]]; then
			banco=sindical_$banco
		fi
		if [[ $bIgnoraTabelas == true ]] ; then
			for tabela in "${aTabelasIgnoradas[@]}"
			do :
			   extracommands+=" --ignore-table=$banco.${tabela}"
			done
		fi

		if [[ $baixa_por_ssh == true && $remote == true && $ssh != "" ]] ; then
			ssh.exe "$ssh" "mysqldump -u $user -p$pass $banco $tabelas $extracommands > /tmp/$banco.sql && gzip -f /tmp/$banco.sql"
			scp "$ssh":/tmp/"$banco".sql.gz ~/backups/temp.gz
			gunzip -c ~/backups/temp.gz > "$fullpath"
			rm ~/backups/temp.gz
		else
			$path_root/../mysql/bin/mysqldump.exe -u "$user" -p"$pass" -h "$host" "$banco" $tabelas $extracommands > "$fullpath"
		fi
		sed -i 's/DEFAULT CURRENT_TIMESTAMP//g' "$fullpath"
		sed -i 's/.+DEFINER=.+\n//g' "$fullpath"
		sed -i 's/.+CREATE ALGORITHM=.+\n//g' "$fullpath"
		echo -e "SET AUTOCOMMIT=0;\nSET UNIQUE_CHECKS=0;\nSET FOREIGN_KEY_CHECKS=0;" | cat - "$fullpath" > "$fullpath"_temp.sql
		(cat "$fullpath"_temp.sql ; echo -e "SET FOREIGN_KEY_CHECKS=1;\nSET UNIQUE_CHECKS=1;\nSET AUTOCOMMIT=1;\nCOMMIT;") > "$fullpath"
		rm "$fullpath"_temp.sql
	fi
}

function mysql_backup_local {
	echo "Fazendo dump local"
	bkp $@
}

function mysql_backup_remote {
	if [[ $baixa_por_ssh == true ]]; then
		echo "Fazendo dump de produção por ssh"
	else
		echo "Fazendo dump de produção"
	fi

	bkp -r $@
}

function mysql_dump {
	mysql_backup_remote $@
	mysql_upload_local $@ # -path "$fullpath"
}

function mysql_dump_migracao {
	m "$1" create database if not exists sindical_"$1"_migracao
	mysql_backup_remote $@ -d -f
	mysql_upload_local $@ -b "$1"_migracao # -path "$fullpath"
	mysql_backup_remote $@ -f
	mysql_upload_local $@ -b "$1"_migracao # -path "$fullpath"
}

function mysql_local {
	local host="$local_host"
	local user="$local_user"
	local pass="$local_pass"
	local banco=
	local mysql_commands=("select" "update" "delete" "alter" "show" "desc" "create" "drop" "describe" "flush")

	if [[ "$1" == "-r" ]] ; then
		host="$remote_host"
		user="$remote_user"
		pass="$remote_pass"
		shift
	fi

	# connection="-u $user -h $host -p$pass"
	connection="$pass mysql -u $user -h $host"
	if [[ "$2" == "" ]] ; then
		[[ "$1" != "" ]] && use "$1"
		# if [[ $use_database != *_* ]]; then
			banco=$use_database
		# else
		# 	banco=$1
		# fi
		if [[ $banco != *_ ]]; then
			# if [[ $banco != *_* ]]; then
			# 	banco=sindical_$banco
			# fi
			eval MYSQL_PWD=$connection "$banco"
		else
			eval MYSQL_PWD=$connection
		fi
		# mysql $connection sindical_${use_database:-$1} || mysql $connection
	else
		if [[ $(echo "${mysql_commands[@]}" | grep "$1" | wc -w) -eq 0 ]]; then
			use "$1"
			shift
		fi
			banco="$use_database"
		local sql=$@
		if [[ -f $@ ]]; then
			sql="source ${sql/~/\~}"
		fi
		# if [[ $banco != *_* ]]; then
		# 	banco=sindical_$banco
		# fi

		if [[ "$sql" != "" ]]; then
			eval MYSQL_PWD=$connection "$banco" -e \'"$sql"\'
		else
			eval MYSQL_PWD=$connection
		fi
		# mysql $connection sindical_$banco -e "$sql" || mysql $connection
	fi
}


function mysql_plus_local {
	local host="$local_host"
	local user="$local_user"
	local pass="$local_pass"
	local banco=

	if [[ "$1" == "-r" ]] ; then
		host="$remote_host"
		user="$remote_user"
		pass="$remote_pass"
		shift
	fi

	# connection="-u $user -h $host -p$pass"
	connection="-u $user -h $host -p$pass"
	[[ "$1" != "" ]] && use "$1"
	# if [[ $use_database != *_* ]]; then
		banco=$use_database
	# else
	# 	banco=$1
	# fi
	if [[ $banco != *_ ]]; then
		# if [[ $banco != *_* ]]; then
		# 	banco=sindical_$banco
		# fi
		mysqli $connection "$banco"
	else
		mysqli $connection
	fi
}

function mysql_remote {
	mysql_local -r "$@"
}

function mysql_update_urlws_local {
	local banco=${1:-sispag}
	local sql="update ema_empresa set ema_url_ws = replace(replace(ema_url_ws, '.sindicalizi.com.br',''), 'http://', 'http://localhost/')  where ema_url_ws like '%.sindicalizi.com.br/sispagintegracao/';"
	echo "Alterando ema_url_ws de $banco para local" && mysql -u"$local_user" -p"$local_pass"  -h"$local_host" sindical_"$banco" -e "$sql"
}

function mysql_update_urlws_remote {
	local banco=${1:-sispag}
	local sql="update ema_empresa set ema_url_ws = replace(replace(ema_url_ws, 'localhost/', ''), '/sispagintegracao/', '.sindicalizi.com.br/sispagintegracao/') where ema_url_ws like 'http://localhost/%' and ema_url_ws not like 'http://localhost/sispagintegracao/';"
	if [[ "$2" == "-l" ]]; then
		mysql -u"$local_user" -p"$local_pass"  -h"$local_host" sindical_"$banco" -e "$sql"
	else
		echo "Alterando ema_url_ws de $banco para remote" && mysql -u"$remote_user" -p"$remote_pass"  -h"$remote_host" sindical_"$banco" -e "$sql"
	fi
}

function mysql_upload {
	local host="$local_host"
	local user="$local_user"
	local pass="$local_pass"
	local banco=
	local exit=false
	local remote=false

	while [ "$1" != "" ]; do
		case $1 in
			-h | --host )
				shift
				host=$1
			;;
			-u | --user )
				shift
				user=$1
			;;
			-p | --pass )
				shift
				pass=$1
			;;
			-b | --banco )
				shift
				banco=$1
			;;
			--h | -help )
				echo "Que doideira!!"
				exit=true
			;;
			-r | --remote )
				remote=true
				ssh="sindicalizi"
			;;
			* )
				if [[ $banco == "" ]] ; then
					banco=$1
				else
					fullpath=$1
					path=$(echo $fullpath | tr "/" " ")
					path=${path[@]:(-1)}
				fi
			;;
		esac
		shift
	done

	if [[ $exit == false ]] && [[ $banco != "" ]] && [[ "$path" != "" ]]; then
		if [[ $remote == true ]]; then
			host="$remote_host"
			user="$remote_user"
			pass="$remote_pass"
			[[ $banco == sispag* ]] && mysql_update_urlws_remote $banco -l
		fi
		if [[ $banco != *_* ]]; then
			banco=sindical_$banco
		fi

		connection="$pass mysql -u $user -h $host"
		if [[ $baixa_por_ssh == true && $remote == true && $ssh != "" ]] ; then
			if [[ $fullpath != *.gz ]]; then
				gzip "$fullpath"
				fullpath="$fullpath".gz
			fi
			scp "$fullpath" sindicalizi:.
			ssh.exe "$ssh" "gunzip $path.gz && mysql -u $user -p$pass $banco < $path"
			# rm "$fullpath".gz
		else
			mysql -u "$user" -p"$pass" -h "$host" "$banco" < "$fullpath"
		fi



		[[ $banco == sispag* && $remote == false ]] && mysql_update_urlws_local $banco
		[[ $banco == sispag* && $remote == true ]] && mysql_update_urlws_remote $banco && mysql_update_urlws_local $banco
	fi
}

function mysql_upload_local {
	echo "Fazendo restore local"
	mysql_upload $@
}

function mysql_upload_remote {

	read -r -p "Tem certeza que deseja subir dados para o servidor? [S/N] " response
	case $response in
		[sS][iI][mM]|[sS])
			echo "Fazendo restore em produção"
			mysql_upload -r $@
			;;
		*)
			;;
	esac
}

function mysql_use {
	local bases=("manager" "sindical")
	local array_handler
	array_handler=(${1//_/ })
	if [[ $1 == "" ]]; then
		use_database=sindical_
	else if [[ "${bases[@]}" == *"${array_handler[0]}"* ]]; then
			use_database="$1"
			if [[ $use_database != *_* ]]; then
				use_database="$use_database"_
			fi
		else if [[ $use_database == *_* ]]; then
			array_handler=(${use_database//_/ })
			use_database="${array_handler[0]}"_"$1"
			fi
		fi
	fi
	# echo "usando $use_database"
}

function mysql_restore {
	mysql_backup_local $@ -b "$1"
	mysql_upload_remote $@ # -path "$fullpath"
}

function mysql_restore_migracao {
	mysql_backup_local $@ -b "$1"_migracao
	mysql_upload_remote $@ # -path "$fullpath"
}